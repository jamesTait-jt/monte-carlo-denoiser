import os
import tensorflow as tf
from tensorflow.python.framework import ops


#_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'custom_ops/weighted_average_gpu.so')
_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'custom_ops/weighted_average.so')
_module = tf.load_op_library(_path)
weighted_average = _module.weighted_average

@ops.RegisterGradient("WeightedAverage")
def _weighted_average_grad(op, grad):
  """The gradients for `weighted_average`.

  Args:
    op: The `weighted_average` `Operation` that we are differentiating, which we
      can use to find the inputs and outputs of the original op.
    grad: Gradient with respect to the output of the `weighted_average` op.

  Returns:
    Gradients with respect to the input of `weighted_average`.
  """
  img = op.inputs[0]
  wgt = op.inputs[1]
  weighted_average_grad = _module.weighted_average_gradients(wgt, grad, img)
  # Return a list of two Tensors, since we have two inputs. The computed value
  # however corresponds to the gradient with respect to the input weights, ie.
  # the second input, and is therefore assigned to the second output. The first
  # output is set to None, since it corresponds to an input that was not
  # generated by the network (the original input color buffer).
  return [None, weighted_average_grad]
